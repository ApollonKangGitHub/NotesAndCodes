//==============================================复习：==================================================
信号参数可以比槽函数参数多，但是反过来不行。
一个信号可以连接多个槽函数，一个槽函数可以被多个信号连接。信号可以连接信号。
信号连接成功后可以断开连接(disconnect()与connect用法相同)、槽函数可以是Lamda表达式

QPushButton * button = new QPushButton("close",this);
//Qt4：
	connect(button,SIGNAL(clicked(bool)),this,SLOT(close()));
//Qt5：
	connect(button,&QPushButton::clicked,this,&Widget::close);
用到Lamda表达式时需要在.pro工程文件中加上"CONFIG += C++11"

Lamda格式：
[capture list](parameter list)mutable exception -> return type
{
		function body 
}
capture list:捕获列表
	[]:空捕获列表
	[names]:逗号分隔的名字列表，lamada所在函数的局部变量，默认以值传递，若变量名字前加&则是以引用传递
	[&]:隐式捕获列表，引用捕获方式，lamda所在使用的来自所在函数的实体都采用引用方式使用
	[=]:值捕获方式，加mutable则可以修改否则只能读
	[&,identifier_list]:&与names的拼接(&是引用捕获,identifier_list部分是值捕获)，但是identifier_list的名字前不能加&
	[=,identifier_list]:=与names的拼接(=是值捕获,identifier_list部分是引用捕获)，但是identifier_list的名字前必须加&，并且名字不能是this
parameter list:参数列表
mutable:可修改
exception:异常
return type:返回值
eg:
//transform(b1,e1,b2,op);     	//把一个区间[b1,e1)内的数据经过(op)转化,放入第二个容器内
								//也就是复制+修改（变换）    当然b2可以等于b1
//transform()前两个迭代器为输入序列范围，第三个迭代器为目的位置
transform(vi.begin(),vi.end(),vi,begin(),
	[](int x) -> int	//空捕获列表，int参数，int返回值
	{
		if(x<0)
			return -i;
		else
			return i;
	}
);
//=============================================常用控件=================================================
layouts						布局组：水平、垂直、网格
Spacers						间隔组：弹簧
Buttons						按钮组
Item Views(Model-Based)		项目视图组(基于模型)
Item Widgets(Item-Based)	项目部件组(基于项目)
Containers					容器组
Input Widgets				输入部件组
Display Widgets				显示控件组

常用类：
(1)、按钮
QPushButton
QToolButton
QRadioButton
(2)、item
QListWidget
(3)、容器类
QStackWidget
QWidget
QFrame
(4)、编辑类
QComboBox
QLineEdit
QTestEdit
(5)、显示类
QLabel
QLcdNumber
QProgressBar

布局：水平、垂直、网格、弹簧、布局属性、大小策略、最大大小、最小大小、容器(布局分类)

自定义控件：ui的控件和自定义的控件父类(基类)有相同
选中ui控件-->右键-->提升


ui中的多页切换：
static int = 0;
ui->stackedWidget->setCurrentIndex(++i%4);	//有4页就对4区域
//=============================================Qt样式表=================================================
每个样式规则如下：
selector{attribute:value}
	选择器(selector)通常是一个类名
	属性(attribute)通常是样式表属性的名字
	值(value)则是属性对应的具体的值
eg:QLabel{color:red}
//简化：同时设定多个
selector1,selector2,...,selectorN{
	attribute1:value1;
	attribute2:value2;
	...
	attributeN:valueN;
}
//eg：
QCheckBox,QComboBOX,QSpinBox{
	color:red;					//前景色红色
	background-color:white;		//背景色白色
	font:blod;					//字体加粗
	
}
//Qt样式表类似于HTML的CSS
配合ui->对象->setStyleSheet("str")使用，str即样式的字符串：
		ui->label->setStyleSheet("QLabel{color:red;background-color:blue;}");
//混合色就需要用RGB来配色，写法如下：
		ui->label->setStyleSheet("QLabel{color:rgb(0,0,0);background-color:rgb(255,255,0)}");
//====================================样式表属性:03_styleSheet========================================
//在样式表中，每个部件被看做是一个由四个同心相似的矩形组成的箱体：
空白(margin)：位于边框外，并总是透明的
边框(border):边框为部件提供了四周的框架，其border-style属性可以设置一些内置的框架风格，如:inset、outset、 solid、ridge
填充(padding):填充在边框和内容区域之间，提供了空白间隔
内容(content):对于一个平面部件，四个矩形是完全重合。	

background-image:设置背景图片、平铺
border-image:设置背景图片、自动适应大小
//=======================================事件：04_Event=======================================
事件(event)是由系统或者Qt本身在不同时刻发出的。当用户按下鼠标、敲下键盘，或者是窗口需要重新绘制的时候
都会发出一个相应的事件。一些事件在对用户操作做出相应时发出，如键盘事件等；另外一些则是由系统自动发出，如即使事件间等。
Qt程序需要在main()函数创建一二QApplication对象，然后调用它的exec()函数。这个函数就是开始Qt的事件循环。在执行exec()函数之后，
程序将进入事件循环来监听应用程序的事件，当事件发生时，Qt将创建一个事件对象。Qt中所有事件类都继承自QEvent。在事件对象创建
完毕之后，Qt将这个事件对象传递给QObject的event()函数。event()函数并不直接处理事件，而是按照事件对象的类型分派给指定的
事件处理函数(event handler)进行处理。

在所有组件的父类QWidget中，定义了很多事件处理的回调函数，如：
keyPressEvent()				//键盘按下事件
keyReleaseEvent()			//键盘释放事件
mouseDoubleClickEvent()		//鼠标双击事件
mouseMoveEvent()			//鼠标移动事件
mousePressEvent()			//鼠标按下事件
mouseReleaseEvent()			//鼠标释放事件
timerEvent()				//定时器事件
dragEnterEvent()			//拖拽进入当前窗口事件
dragLeaveEvent()			//拖拽离开当前窗口事件
dragMoveEvent()				//拖拽移动事件
showEvent()					//显示事件
......  
事件处理函数全部是虚函数，因为不同的类对于同一事件处理不尽相同。
//=======================================忽略与接收事件========================================
	void MyWidget::closeEvent(QCloseEvent *ev)
	{
		int ret = QMessageBox::question(this,"question","是否需要关闭窗口");
		if(ret == QMessageBox::Yes){
			//关闭窗口
			//接收事件，事件不再向下传递
			ev->accept();
		}else{
			//不关闭窗口
			//忽略事件，事件继续给父组件传递
			ev->ignore();
		}
	}
//===============================event()函数、eventFilter()事件过滤器================================
//事件处理器event()只在本控件有效
	virtual bool QEvent::event(QEvent * event);
		//通过event()进行事件过滤
		bool MyWidget::event(QEvent *ev)
		{
		//switch的写法
		#if 1
			//对于定时器进行功能进行覆写，对键盘的Y键保留中断，其他键忽略。其它时间仍按默认处理
			//默认的是在event()的分发层(下一级)进行处理，而定时器的处理直接放在了event()函数中处理
			//到了下一层定时器的处理发现return的是true就不再处理，键盘按键也是同理
			switch(ev->type()){
				case QEvent::Timer: //如果是定时器事件，返回true停止时间传播，忽略定时器中断
					//timerEvent(static_cast<QTimerEvent*>(ev));       //不处理直接返回就是干掉了定时器
					//取消注释，则是将定时器事件提到event()函数中直接处理
					return true;
					break;
				case QEvent::KeyPress:
					if(static_cast<QKeyEvent *>(ev)->key() == Qt::Key_Y){
						return QWidget::event(ev);
					}
					return true;
					break;
				default:
					return QWidget::event(ev);
					break;
					//...
			}
		#endif
			//if...else...的写法
		#if 0
			if(ev->type() == QEvent::Timer){        //定时器特殊处理：忽略
				return true;
			}
			else if(ev->type() == QEvent::KeyPress){    //键盘处理：保留Y键，其它键忽略
				if(static_cast<QKeyEvent *>(ev)->key() == Qt::Key_Y){
					return QWidget::event(ev);
				}
				return true;
			}
			else{
				return QWidget::event(ev);  //其它事件按原有方式处理
				//注意这里一定要把不特殊处理的按原有方式处理
			}
		#endif
		}
//事件过滤器：
	virtual bool QObject::eventFilter(QObject * watched,QEvent * event);
一般不用event()做过滤
而采用eventFilter()针对不同类进行指定的过滤：
		//ui->label->installEventFilter(this);//在构造函数中安装过滤器
		//对于不同的类要分别安装过滤器
		bool MyWidget::eventFilter(QObject *obj, QEvent *ev)
		{
			//对标签label进行事件过滤
			if(obj == ui->label){
				QMouseEvent * env = static_cast<QMouseEvent *>(ev);
				if(ev->type() == QEvent::MouseMove){
					ui->label->setText(QString("<center><h1>Mouse Move:(%1, %2)"
											   "</h1></center>").arg(env->x()).arg(env->y()));
					return true;    //结束传播
				}
				else if(ev->type() == QEvent::MouseButtonPress){
					ui->label->setText(QString("<center><h1>Mouse pressed</h1></center>"));
					return true;    //结束传播
				}
				else if(ev->type() == QEvent::MouseButtonRelease){
					ui->label->setText(QString("<center><h1>Mouse released</h1></center>"));
					return true;    //结束传播
				}
			}
				return QWidget::eventFilter(obj,ev);

		}
注意：事件过滤器和被安装过滤器的组件必须在统一线程中。安装过滤器之后，两个组件到了不同的线程中，
只有等到两个组件回到同一个线程中的时候，过滤器才会生效。

由于重写最底层的事件处理函数就能够搞定，所以一般不要修改event()和eventFilter()