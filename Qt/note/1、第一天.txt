Qt是一个跨平台的、C++图形用户界面应用程序框架。
Qt开发了Linux的KDE桌面环境
QMainWindow:菜单窗口类的基类
Qwidget:空间窗口类的基类
QDialog:对话框窗口基类(不能放大缩小，只有关闭按钮)
//=======================================01_TEST1创建一个空白窗口==============================
		#include "mywidget.h"
		#include <QApplication>
		//QApplication应用程序类
		//Qt头文件不带.h
		//头文件名与类名相同

		int main(int argc, char *argv[])
		{
			//有且只有一个应用程序类的对象
			QApplication a(argc, argv);

			//MyWidget继承于QWidget，QWidget是一个窗口基类
			//所以MyWidget也是窗口类
			//w是该类实例化后的对象，是一个窗口
			MyWidget w;
			//窗口默认是隐藏的，需要人为调用show()显示
			w.show();

			//a.exec()的作用是：
			//让程序一直执行(而不是窗口一闪而过)，等待用户操作(等待事件发生：如鼠标、键盘)
			return a.exec();
			//等价于：
			//a.exec()
			//return 0;
		}

//=====================================基本框架========================================
		#include <QApplication>

		int main(int argc, char *argv[])
		{
			QApplication a(argc, argv);
		  
			return a.exec();
		}
//=======================QT的项目文件.pro解析，类似于MakeFile==============================
		#-------------------------------------------------
		#
		# Project created by QtCreator 2017-05-20T17:49:13
		#
		#-------------------------------------------------
		#QT += core gui，添加一个模块为GUI图形界面模块，与添加链接库类似
		QT       += core gui		
		#高于4版本就添加：QT += widgets
		greaterThan(QT_MAJOR_VERSION, 4): QT += widgets
		#应用程序(可执行程序)的名字，可改
		TARGET = 01_TEST1
		#MakeFIle类型，app
		TEMPLATE = app
		#源文件.cpp文件
		SOURCES += main.cpp\
				mywidget.cpp
		#头文件.h文件
		HEADERS  += mywidget.h

//查看QWidget的F1帮助，可以看到：
//Header:	#include <QWidget>
//qmake:	 QT += widgets
关于Qt的模块，可以查看“图1-1、Qt基本模块”
//===================================标准信号和槽:03_SignalAndSlot====================================
//connect()就像Linux系统编程中的signal()注册信号的函数一样
connect(&b1,&QPushButton::pressed,this,&MainWidget::close);
/*
* &b1：信号发出者，为一个指针
* &QPushButton::pressed：要处理的信号，格式-->&发送者对象的类名::信号名字
* this：信号接收者，为一个指针
* &MainWidget::close：槽函数(信号处理函数),格式-->&接收者对象的类名::槽函数名字
*
*/

pressed属于标准信号(signal)，close()也属于标准槽(slot)
//===================================自定义槽:03_SignalAndSlot=======================================
//自定义槽：就是普通的函数，但是需要与信号一致(参数、返回值)
//由于信号没有返回值，所以槽一定有返回值

		//b2发送信号、b2接收信号：按键按下时修改b2
		connect(b2, &QPushButton::pressed, this, &MainWidget::mySlot);
		//b2发送信号、b1接收信号：按键按下时隐藏b1
		connect(b2, &QPushButton::pressed, &b1, &QPushButton::hide);   //hide(隐藏槽函数)
		//b2发送信号、b1接收信号：按键抬起时显示b1
		connect(b2, &QPushButton::released, &b1, &QPushButton::show);


		void MainWidget::mySlot(){	//自定义槽与标准信号一致，无参数无返回值
			b2->setText("DONOTHING");
		}

//released是按键抬起时的信号
//pressed是按键按下时的信号
//===================================自定义信号:03_SignalAndSlot=======================================
//头文件“signals:”中声明自定义信号，并且只需要声明，不用定义
//在槽函数中发送信号时使用emit调用：
//emit mySignal();

		//connect(&b, &QPushButton::clicked, this, &SubWidget::sendSlot);

		void SubWidget::sendSlot(){
			emit mySignal();    //发送信号
		}

总结/注意：按下一个按钮，多个信号都是发送的，只不过就看connect()函数回不回去注册处理。
//=================================信号和槽的重载:03_SignalAndSlot======================================
信号与槽：Qt对象之间的通信的接口，对象可以不同，并不一定是窗口/按钮
信号与槽有参数无参数与signation()函数也是很相似，可以不指定参数与signal()相似，也可以指定参数。
信号有参数意味着信号可以实现静多态(重载)，当然对应的槽函数也应该有参数且参数与信号一致。
由于connect在建立信号与槽的关系的时候，信号和槽都是作为一个“变量”取其地址，信号虽然可以重载，槽也可以重载。
但是只要一重载，由于connect中标准写法：信号和槽都不带参数，所以要用函数指针区分有参数和无参数的信号/槽。
//eg：
		void (SubWidget::*pNoParaSignal)() = SubWidget::mySignal;
		void (MainWidget::*pdealNoParaSub)() = MainWidget::dealSub;
		connect(&w, pNoParaSignal, this, pdealNoParaSub);

		void (SubWidget::*pParaSignal)(int,QString) = SubWidget::mySignal;
		void (MainWidget::*pdealParaSub)(int,QString) = MainWidget::dealSub;
		connect(&w, pParaSignal, this, pdealParaSub);
//由于重载的信号与槽都需要用函数指针区分，一般信号设为名字一样的，但是槽没有必要设置为一样的
//重载意味着多写函数指针的声明，必要不必要啊，全看个人需要
//QDebug类用来打印，与C++基本完全相同。QString类与string类也基本相同。

当然不可能QT不对这种烦人的写法做优化：
//下面这种方式是需要在头文件中声明槽函数类型的："public slots:"
		connect(&w, SIGNAL(mySignal()), this, SLOT(dealSub()));
		connect(&w, SIGNAL(mySignal(int,QString)), this, SLOT(dealSub(int,QString)));
但是由于SIGNAL与SLOT是宏函数，它们将括号中的函数名字转换成字符串(类似于倾轧)，不进行错误检查所以很容易出错
比如：connect(&w, SIGNAL(mySiganl()), this, SLOT(dealSub()));
mySiganl()其中将两个字母写反了，但是编译器并不会检查出这样的由于宏带来的错误，所以隐患比较高
//=================================Lamda表达式与信号:04_LamdaAndSignal==================================
C++11新特性，所以需要在.pro文中加上:"CONFIG += C++11"
Lamda表达式其实就是匿名函数。
[](){...},“[]”用来传递外部参数，否则外部参数在函数内部自然是不能识别的.“()”则可以用来传递：有参数信号的参数，“{}”里是函数实体
三种[]传递函数的方式：
//[=]表示把函数外部所有变量、类中所有成员以值传递(拷贝)，“()”后加“mutable”可以扩展外部变量与头文件中类成员作用域到表达式中
//[this] 表示把类中所有成员以值传递进去
//[&]表示把外部所有局部变量以引用传递进来
//也可以选择单个参数传递，但是一般不用
	
mouse Clicked:点击鼠标响应事件(按键通码)
mouse Pressed:鼠标按下时响应事件(按键通码加断码)
mouse released:松开鼠标时响应时间(按键断码)
	 
一、
//对于自定义信号的发送问题：
按钮只负责调用槽函数(回调函数、信号的发送函数)
槽函数/回调函数/发送函数负责发送信号
//对于系统信号pressed、relesead、clicked同样如此
二、
上面的是对于发送信号的一方来说
对于接受信号的一方来说，槽函数/回调函数/信号处理函数负责处理信号

也就是说按钮仅仅是触发一个软件中断。
槽函数不是非得专用于信号的处理，也常用于信号的发送，当然也能用于普通函数之用
//============================坐标系与内存管理：05_Co0rdinatre===========================================
子窗口相对于父窗口move()设置偏移，左上角为(0,0)，以像素点为单位
窗口大小用resize()设置，但唯依旧是像素

内存释放：
//指定父对象之后，并且必须是直接或间接继承与QObject类
//子对象如果是动态分配内存的，则不需要手动delete释放
//系统会自动释放
其中一条继承关系为：
QObject-->QWidget-->QAbstractButton-->QPushButton-->...
//===========================================获取屏幕分辨率的方法========================================
//连接：http://blog.csdn.net/iEearth/article/details/43669821
		#include <QApplication>
		#include <QDesktopWidget>
		#include <QDebug>
		void GetScreenSize(){
			QDesktopWidget *deskWgt = QApplication::desktop();
			if (deskWgt) {
				QRect screenRect = deskWgt->screenGeometry();
				screenWidth = screenRect.width();
				screenHeight = screenRect.height();
				//qDebug() << "screen width:" <<screenWidth << ",height:" << screenHeight;
		}
//===================================菜单栏、工具栏窗口:06_QMainWindow====================================
		#include <QDebug>
		#include <QDesktopWidget>   //Desktop信息
		#include <QApplication>
		#include <QMenuBar>         //菜单栏
		#include <QMenu>            //菜单
		#include <QAction>          //动作
		#include <QToolBar>         //工具栏
		#include <QPushButton>
		#include <QStatusBar>       //状态栏
		#include <QLabel>           //标签
		#include <QTextEdit>        //文本编辑
		#include <QDockWidget>      //浮动窗口
//基本头文件
//==================================================Qt的枚举====================================
//枚举浮动窗口位置
enum Qt::DockWidgetArea
flags Qt::DockWidgetAreas

Constant				Value
Qt::LeftDockWidgetArea	0x1
Qt::RightDockWidgetArea	0x2
Qt::TopDockWidgetArea	0x4
Qt::BottomDockWidgetArea	0x8
Qt::AllDockWidgetAreas	DockWidgetArea_Mask
Qt::NoDockWidgetArea	0

//枚举一周七天
enum Qt::DayOfWeek
Constant	Value
Qt::Monday	1
Qt::Tuesday	2
Qt::Wednesday	3
Qt::Thursday	4
Qt::Friday	5
Qt::Saturday	6
Qt::Sunday	7
//====================================模态与非模态对话框:07_Dialog==============================
//=====================关于对话框、问题对话框、文件对话框：:07_Dialog===========================
//QMessageBox::about();
	void about(QWidget * parent, const QString & title, const QString & text)
	void aboutQt(QWidget * parent, const QString & title = QString())
//QMessageBox::question();
	StandardButton question(QWidget * parent, const QString & title, const QString & text, 
								StandardButtons buttons = StandardButtons( Yes | No ), StandardButton defaultButton = NoButton)
//问题对话框的返回值的枚举：
	enum QMessageBox::StandardButton
	flags QMessageBox::StandardButtons

	These enums describe flags for standard buttons. Each button has a defined ButtonRole.

	Constant						Value		Description
	QMessageBox::Ok					0x00000400	An "OK" button defined with the AcceptRole.
	QMessageBox::Open				0x00002000	An "Open" button defined with the AcceptRole.
	QMessageBox::Save				0x00000800	A "Save" button defined with the AcceptRole.
	QMessageBox::Cancel				0x00400000	A "Cancel" button defined with the RejectRole.
	QMessageBox::Close				0x00200000	A "Close" button defined with the RejectRole.
	QMessageBox::Discard			0x00800000	A "Discard" or "Don't Save" button, depending on the platform, defined with the DestructiveRole.
	QMessageBox::Apply				0x02000000	An "Apply" button defined with the ApplyRole.
	QMessageBox::Reset				0x04000000	A "Reset" button defined with the ResetRole.
	QMessageBox::RestoreDefaults	0x08000000	A "Restore Defaults" button defined with the ResetRole.
	QMessageBox::Help				0x01000000	A "Help" button defined with the HelpRole.
	QMessageBox::SaveAll			0x00001000	A "Save All" button defined with the AcceptRole.
	QMessageBox::Yes				0x00004000	A "Yes" button defined with the YesRole.
	QMessageBox::YesToAll			0x00008000	A "Yes to All" button defined with the YesRole.
	QMessageBox::No					0x00010000	A "No" button defined with the NoRole.
	QMessageBox::NoToAll			0x00020000	A "No to All" button defined with the NoRole.
	QMessageBox::Abort				0x00040000	An "Abort" button defined with the RejectRole.
	QMessageBox::Retry				0x00080000	A "Retry" button defined with the AcceptRole.
	QMessageBox::Ignore				0x00100000	An "Ignore" button defined with the AcceptRole.
	QMessageBox::NoButton			0x00000000	An invalid button.
//获取文件名字：
	QString	getOpenFileName(QWidget * parent = 0, const QString & caption = QString(), const QString & dir = QString(), 
							const QString & filter = QString(), QString * selectedFilter = 0, Options options = 0)