第一种多线程的启用方式(Qt4.7以前)：01_QThread
QT的线程需要定义一个类，继承与QThread
		class MyThread:public QThread
		{
		protected:			//public也可以
			void run();	//虚函数，调用的是线程处理函数(和主线程不再同一线程)
			//相当于调用pthread_create((pthread_t *)id, NULL, run, NULL);
			
		signals:
			void isDone();	//处理完毕发送iSDone()信号
		}

		void MyThread::run()
		{
			//进行复杂操作的处理
			
			//处理完毕发送信号
			emit isDone();
		}
		
	//在主线程中调用子线程，不能直接调用run()函数，要使用:thread.start()启动
	//主线程可以检测isDone()信号进行相应操作
创建现成的类时，选择继承Object类，然后在创建以后修改为继承自QThread，(不要选择继承于QWidget再修改)

//===================================================================================
第二种多线程的启用方式(Qt4.7以后)：02_QThreadPro
另外一种方法：
设定一个类继承自QObject
类中设置一个线程函数（只有一个线程函数）

//①自定义线程类对象动态分配空间，不能指定父对象,否则第三步不能成功
mythread = new MyThread;

//②子线程分配空间
thread = new QThread(this);

//③把自定义线程加入到子线程中
mythread->moveToThread(thread);
	
//connect()的第五个参数链接方式：在多线程使用时才有意义
#if 0
Qt::AutoConnection//如果是单线程默认使用直接方式，如果是多线程默认使用队列
Qt::DirectConnection//直接,槽函数(myTimeout())和信号接收者在同一个线程，即打印的是两个线程的ID
Qt::QueuedConnection//队列,槽函数(myTimeout())和信号发送者在同一个线程，即打印的是一个线程的ID
#endif

//===================================================================================
数据库要在pro文件中加上“QT += sql”

//注意：
“D:\Qt\Qt5.5.1\5.5\mingw492_32\bin\libmysql.dll”文件若没有则需要下载以后复制到该目录下
另外数据库必须先安装并创建用户才能连接

mySql的.ini配置文件：
[mysql]
#设置mysql客户端默认字符集
default-character-set=utf8 
[mysqld]
#设置3306端口
port = 3306 
#设置mysql的安装目录
basedir="D:\Program Files(x86)\mysql-5.7.18-winx64"
#设置mysql数据库的数据的存放目录
datadir="D:\Program Files(x86)\mysql-5.7.18-winx64\data"
#允许最大连接数
max_connections=200
#服务端使用的字符集默认为8比特编码的latin1字符集
character-set-server=utf8
#创建新表时将使用的默认存储引擎
default-storage-engine=INNODB 

使用Sqllite不像MySQL那样需要安装与配置数据库：
	零配置：无需安装和管理配置
	储存在单一磁盘文件中的一个完整的数据库
MySQL安装:
http://jingyan.baidu.com/article/597035521d5de28fc00740e6.html
安装MySQL服务的过程遇到的问题：
http://jingyan.baidu.com/article/0f5fb0991636376d8234ea7a.html

登录MySql（cmd进入安装bin目录下）：
mysql -uroot -p
mysqladmin -u root -p password	（设置密码，为mysql）

cmd
mysql -uroot -p:登录，回车输入密码
create database 数据库名;创建一个数据库
show databases;显示所有数据库
use 数据库;切换数据库目录
show tables;显示当前数据库下的表名
select * from 表名;sql查询工作
exit;退出。
注意：语句加上分号后回车运行
//=====================================================================================
//添加MySql数据库
QSqlDatabase db = QSqlDatabase::addDatabase("QMYSQL");

//连接数据库，必须先安装数据库
db.setHostName("127.0.0.1");//数据库服务器IP
db.setUserName("root");//数据库用户名
db.setPassword("mysql");//密码
db.setDatabaseName("info");//使用哪个数据库

//打开数据库
if( false == db.open() ){
	//数据库打开失败，打开失败则提示错误信息
	QMessageBox::warning(this,"打开错误",db.lastError().text());
	return;
}

采用
QSqlQuery query;
query.exec("sql语句");进行数据库操作

创建表：
create table student(id int primary key auto_increment, name varchar(255), age int, score int);
插入：
insert into student(id, name, age, score) values(1, 'mike', 18, 99);
删除：
delete from student where name = 'nameA';
索引：
select * from student;
select * from student where name = '康若锦';
select 那么 from student where name = "xiaoE" and age = '20';
更新：
update student set score = value1, age = value2 where age = '20' and name = 'who'