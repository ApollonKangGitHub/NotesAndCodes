发展：
外行->菜鸟->准程序员->程序员->核心(高级)程序员->系统分析师/系统架构师/项目经理-->部门经理/总监(管理职位)--->CTO(技术总裁)

做项目、软件的流程：
①需求(要写什么)
②系统分析(把客户的要求转成计算机系统)
③系统架构设计(把J计算机的系统进行设计)
④编码(把设计用代码实现)
⑤测试(保证软件的质量，必须遵循需求)
⑥安装、调试和维护
----------------------------------------------------------------
综合案例：写一个模拟银行的项目
	
项目包括：开户(重点)、销户、存钱、取钱、转账、查询6个基本功能。
	
分析：
系统包括Server端和Client端，暂时做单机版。使用IPC(消息队列)进行客户端与服务器端数据交互，创建两个消息队列(Server-->Client & Client-->Server)。

Server的功能：
①启动时创建消息队列，关闭时删除消息队列，用信号关闭，在信号处理函数中删除。
②Server要根据Client发送的数据判断是何种请求，再根据各种请求作出相应处理。数据封存在一个结构体(定义在.h文件中)中
	struct mymsg{
		long ntype;
		struct account acc;
	};
	struct account是账户类型的结构体，包括成员:账号、用户名、密码、金额。
③分析开户流程：Client输入用户名、密码、金额，把数据封装在mymsg中，通过消息队列发送给Server，Server生成一个账号，然后把account信息写入文件中，并把处理结果返回给Client。

账号的生成(保证不重复)：
先建立一个账号最大值(最新)的存储文件，设定初始值，每次开户都先读取该文件，然后把读到的数加1，并作为新的账号，再把新的账号写回到文件中(该文件中只存储一个值：已经使用的账号最大值)。

账户信息写入文件：每个用户单独创建一个文件(以账号+文件后缀作为文件名，如123456.dat)，以方便销户时，整个数据需要完全清除，只需要删除账户对应的文件即可。
④服务端实现多进程(使用vfork+exec更好)

Client的功能：
①界面的设计，方便人机交互，打印各种信息与选择
②提交相应数据