回顾：
信号量集--如何使用信号量集实现控制访问共享资源的并行进程最大数量。信号量集的使用步骤：
①ftok()获取key
②semget()创建/获取 信号量集(数组)
③给每个信号量做初始化最大值，函数semctl()
④对信号量的计数进行+1、-1操作，函数semop()
⑤如果不再使用，可以删除semctl()

网络 -- 网络常识(IP地址/端口)
socket编程：
	一对一：本地通信和网络通信
	本地通信的通信地址：sockaddr_un，通信媒介是socket文件
	网络通信的通信地址sockaddr_in，媒介是网络
通信步骤：
①socket函数，返回socket描述符
②准备通信地址
③bind/connect
④read/write
⑤close
----------------------------------------------------------------
TCP与UDP的区别：
TCP传输数据时，采用的是 数据流的方式，TCP是有连接协议(面向连接协议)，所谓面向连接的协议是指，在数据传输的整个过程中(包括发送接收与等待)，一直保持服务器与客户端的连接；会重发一切错误数据与丢失数据，因此可以保证数据的正确性与完整性。
UDP传输数据时，采用的是 数据报的方式。面向无连接协议，在数据发送与接收的时候建立连接即可，发送/接收完毕就不在保持连接。不会重发错误数据，因此UDP有可能丢失数据。

1、一对多模型TCP编程步骤(SOCK_STREAM)：
(1)、服务器：
①socket()函数，获取socket描述符.SOCK_STREAM
②准备服务器的通信地址
③bind()绑定：服务器对外授权，开放了指定端口
④服务器监听客户端连接请求，listen()函数
⑤等待客户端连接，accept()函数，返回用于交互的socket描述符，accept函数接收监听队列中第一个完成三次TCP链接的描述符。
⑥用accept()返回的描述符进行通信：read()/write()
⑦关闭sockfd，close()
int listen(int sockfd, int backlog);
int accept(int sockfd,struct sockaddr *addr,socklen_t *addrlen);
addr为传出参数，带出接收的监听队列中第一个完成链接的客户端信息；返回值为代表该客户端的新的描述符；addrlen为传入传出参数，传入addr的sizeof的地址大小，传出客户端地址的真实大小。
(2)、客户端：
与服务器基本相同(不需要listen、accept，bind换为connect)。

总结：TCP一对多有两类描述符：第一类描述符不进行数据交互，只是等待客户端的连接(accept()从listen()队列中接收该连接)，accept()在客户端连接上来以后，会返回一个新的描述符，用于读写通信。