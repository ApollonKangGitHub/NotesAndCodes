****************************************
静态库与共享库：
由于项目在很多时候都比较大，源文件很多，数量十分庞大，可以把代码打包成库文件，提供库文件和头文件即可。静态库与动态库，都是代码的归档文件；使用静态库时，把静态库的代码复制到目标文件中导致目标文件会比较庞大；使用动态库时，是将函数的地址（位置）放到目标文件中。静态库在链接时就已经将库中代码复制到目标文件，而共享库在运行时才链接库文件中所需函数。
优缺点：
1、静态库：
优点:只要链接完成，目标文件独立于库文件（静态），并且由于不要寻址，运行速度较快。缺点：目标文件过于臃肿，并且不利于代码的修改、扩展和复用。
2、动态库（更好更常用）：
优点：目标文件小，修改、扩展、复用比较方便；缺点：目标文件必须和共享库同时存在，代码才可以运行，并且运行速度稍慢。


****************************************
静态库创建与使用：
1、写库的源程序（file.c）
2、编译源程序，得到file.o文件（gcc -c）
3、创建静态库文件：ar -r libfile.a file.o
	注：lib为静态库命名规范
4、创建静态库完成以后需要提供.h文件
5、使用静态库：
	写调用的源程序，test.c
	只编译不链接（gcc -c）
	链接test.o和创建好的静态库文件libfile.a
6、链接的方式有三种：
	(1)、直接链接：gcc test.o libfile.a（库文件必须在当前目录下）
	(2)、配置环境变量：LIBRARY_PATH，把库文件所在路径(绝对路径相对路径都可以)放入其中（export LIBRARY_PATH=.），
	然后：gcc test.o -l file
	(3)、gcc test.o -l file -L 库所在路径(推荐使用的方法)


****************************************
动态库创建与使用：
1、写库的源程序file.c编译:gcc -c file.c -o test.o
2、生成共享库：gcc -fPIC -shared file.o -o libXX.so
3、使用（链接）共享库的方式与静态库的方式相同
	注意：共享库链接之后需要配置环境变量LD_LIBRARY_PATH(export LD_LIBRARY_PATH=.)才能运行成功，否则在链接时第一种方式就不能写gcc test.o libfile.a而必须写成gcc test.o ./libfile.a，但是其他两种方式必须配置环境变量。一般我们都使用第三种链接方式，所以养成库链接完毕就配置环境变量的习惯。


****************************************
ldd命令可以查看共享库或者可执行文件的共享库依赖关系，库后面的十六进制是库的地址，环境变量配置的过程，就是为我们自己的共享库（静态库）分配地址的的过程。）