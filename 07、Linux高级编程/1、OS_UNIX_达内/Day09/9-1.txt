回顾：
	vfork+exec系列函数 -- 创建子进程的方式：执行全新的代码。	
	特点：
	调用exec系列函数之前，会占用父进程内存空间，确保子进程先运行，不会复制父进程的内存空间。
	exec系列函数可以执行新的程序，替换以前的代码区、全局区、堆栈区。execl()、exexlp()以NULL参数结尾。
	waitpid()让父进程等待子进程，比wait()更灵活。
	信号 -- 其实就是一个整数，被用来实现软件中断。Linux中1--64（不连续），信号有可靠（1--31）与不可靠之分（34--64）。信号的处理方式：默认、忽略、自定义。信号注册、设置函数：signal()、sigaction().信号发送函数：raise()
----------------------------------------------------------------
kill()函数：为pid进程或|pid|进程组发送sig信号。
int kill(pid_t pid, int sig);

pid > 0 :发送信号给特定进程（进程ID=pid），类似于kill -sig pid命令
pid = 0 :发送信号给与调用进程(发送进程)在同组的所有进程
pid == -1 :发送信号给所有拥有发送权限的（kill -0 pid测试）进程
pid < -1 :发送给uid=|pid|进程组的所有进程

返回值：成功返回0，错误返回-1
killall pname可以杀死所有（必须有信号发送权限）名为pname的同名进程
----------------------------------------------------------------
alarm()函数：可以发送信号，但不是为了发送信号而诞生的函数。
#include<unistd.h>
unsigned int alarm(unsigned int seconds);
只能给当前进程（调用alarm()函数的进程）发送一个SIGALRM信号的函数。
alarm(n);n秒之后会发送一个闹钟信号SIGALRM。闹钟函数alarm()不阻塞，SIGALRM默认处理方式是打印“闹钟”并结束进程。如果多次调用alarm()，新的闹钟会替代原有闹钟。当参数为0，表示闹钟取消。
eg：
alarm(10);/*从现在起10秒后发送一个闹钟信号，默认打印“闹钟”*/
alarm(2);/*从现在起2秒钟后发送一个信号，取消原有10中后发送*/
alarm(0);/*取消原有闹钟*/
/*所以最后不会打印“闹钟”两字*/

返回值：如果以前没有设置闹钟，或者以前设置闹钟已经结束，那么现在（新的）alarm()函数返回0,；如果以前设置alarm()没有结束，那么新的alarm()函数返回之前alarm()到发送信号剩余的时间（类似于sleep返回的剩余时间）。
----------------------------------------------------------------
信号集：
以一个二进制位（1或0）代表某信号的有无，信号n占据第n位（从右数）考虑到以后信号的个数增加的问题（可能达到几百），那么一个int型或者long类型的整数就不能表示。我们用一个很大的整数代表多个信号，这个很大的整数就是信号集，信号集的类型为sigset_t。
信号集必须提供的功能：
增加元素、删除元素、查找元素（看在不在）、取出元素（拿出来）。
信号集的功能函数：
①清空、删除所有信号（全置为0）：
	int sigemptyset(sigset_t * set);
②将所有信号全加入（全置为1）：
	int sigfillset(sigset_t * set);
③增加1个信号：
	int sigaddset(sigset_t * set,int signum);
④删除一个信号：
	int sigdelset(sigset_t * set,int signum);
⑤查找元素（判断是否是现有成员）：
	int sigismember(const sigset_t * set,int signum);
	有返回1、无返回0
----------------------------------------------------------------
信号屏蔽：在执行某些核心代码，我们不希望被信号意外中断，可采用屏蔽信号的方法（信号到了但是延时处理），防止写如等操作被意外终止。解除信号屏蔽以后再处理来过的被屏蔽的信号。
设置信号屏蔽字（屏蔽信号集）：
sigprocmask(int how,sigset_t *new,sigset_t * old);
参数：
how是屏蔽的方式，有三种：
	SIG_BLOCK--相当于或运算，在原有的基础上加上新的屏蔽信号
	SIG_UNBLOCK--相当于与运算，在原有的基础上去除屏蔽的信号
	SIG_SETMASK--直接重新赋值，与原有的无关(最常用)。
new:新的设置的信号屏蔽字，old保存之前的信号屏蔽字，如果old为NULL就是不保存原有的信号屏蔽字。当保存了原有信号屏蔽字到old，核心代码执行完毕重新设置为old信号屏蔽字时，就是取消屏蔽的过程。
----------------------------------------------------------------
sigpending(sigset_t * pend);函数：信号屏蔽期间，取来过的信号放入信号集pend中，取到的来过的信号与是否屏蔽无关。