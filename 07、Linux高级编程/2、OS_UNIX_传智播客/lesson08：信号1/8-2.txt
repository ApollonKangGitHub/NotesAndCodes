信号捕捉：
int sigaction(int signum, const struct sigaction, struct sigaction * oldact);

int signum：信号编号
const struct sigaction:信号新的动作
struct sigaction * oldact：信号原有动作

struct sigaction{
	void		(*sa_handler)(int);//早期的
	void  		(*sa_sigaction)(int, siginfo_t *, void);//最新的
	sigset_t 	sa_mask;//设置阻塞信号(临时信号集)
	int 		sa_flags;//指定是调用第一个函数指针，还是第二个函数指针(这两个函数指针互斥)
	void 		(*sa_restorer)(void);//废弃掉
};

signal()为C标准库函数，sigaction()为Linux系统函数
signal()接口简单且跨平台，但不能设置信号屏蔽字；
sigaction()则只能用于UNIX/LINUX系统，但能设置屏蔽字。
--------------------------------------------------------------------------------------------------------------------------------------
eg:
void deaL_sig(int sig){
	printf("----in deal_sig----");
	printf("sig = %d\n", sig);
	sleep(1);//模拟保证处理信号时间够长，以屏蔽其它同类信号
}
int main(void){
	struct sigaction act;
	act.sa_handler = deal_sig;//当设置为ISG_DFL为默认，SIG_IGN为忽略，设为函数名为自定义
	
//阻塞信号集清空，不阻塞任何信号，当SIGINT信号注册后且收到SIGINT信号后处于处理阶段时，就只屏蔽SIGINT(系统自动设置)，处理完成后恢复不阻塞
	sigemptyset(&act.sa_mask);
	act.sa_flags = 0;//默认属性置零：使用第一个函数指针

	sigaction(SIGINT, &act, NULL);//为SIGINT注册
	while(1){
		printf("****in main****\n");
		sleep(1);
	}
	return 0;
}
--------------------------------------------------------------------------------------------------------------------------------------
注意：信号并非产生立刻中断，当程序在执行过程中，在其拥有的时间片内，接收到一个信号，CPU只知道收到一个信号，不去关心是谁发给谁的，所以CPU不会马上处理，而等待当前时间片到达回收CPU资源，并分给下一个抢占CPU资源的进程。所以先将信号放入内核队列等待，当时间片到，CPU发现有一个发给时间片已经结束的进程的信号时，而该进程暂时被回收资源，只能等待下一次时间片到。当下一次时间片轮转到之前保存现场的进程时，该进程的时间片先用来处理之前等待的的信号，再返回内核，当处理完信号返回内核，时间片还未完就继续到用户空间执行该进程的代码。但是由于信号等待处理的时间很短，所以基本就是实时响应的，所以需要明白核心机制。

另外：SIGUSR1和SIGUSR2这两个信号，系统并未定义这两个信号具体用来干什么，由用户来自己处理，默认是终止进程。虽然其他大多信号也可以注册用以其他功能，但是由于系统已经为这些信号制定了特定的功能，所以我们在自己的使用过程中，凡是要对信号自定义处理的一般都用SIGUSR1和SIGUSR2实现。一般用来实现父子进程间信息同步，注意：子进程会继承父进程的信号屏蔽字与对信号的处理动作(action)。
--------------------------------------------------------------------------------------------------------------------------------------
可重入函数与不可重入函数：
可重入：可以被信号打断，信号处理完毕后看完继续调用
不可重入：不可被信号打断，打断可能出现BUG

eg:
readdir()不可重入，readdir_r()可重入；
strtok()不可重入，strtok_r()可重入。

test(strtok()和strtok_r()用于截断字符串)：
#include<stdio.h>
int main(void)
{
	char buf[] = "hello world itcast krj";
	char *save = buf, *p;
	while((p = strtok_r(save, " ", &save)) != NULL){
		printf("%s\n", p);
	}
}
结果：
hello 
world 
itcast 
krj

对于可重入函数的列表可在man 7 siganl里查看，里面列出来的一系列函数是经过测试且安全的。
可重入函数的一个重要因素是：不包含全局变量和静态变量。
在信号的捕捉函数/多线程(共享)里禁止使用不可重入函数，避免BUG产生，但是多进程(不共享)可以使用。
--------------------------------------------------------------------------------------------------------------------------------------
挂起信号函数：int pause()，当调用时挂起调用进程，等待信号，信号到来则唤醒挂起的进程(可用alarm()测试)。若信号处理方式是被忽略则继续挂起。
可使用alarm()和pause()实现简单的mysleep函数。但是pause()函数可能会产生时序竞态BUG，就需要用到sigsupend()。
sigsupend(const sigset_t *mask);
通过制定mask来临时解除对某个信号的屏蔽；
然后等待挂起；
当被信号唤醒sigsupend()返回以后，恢复原有信号屏蔽字。