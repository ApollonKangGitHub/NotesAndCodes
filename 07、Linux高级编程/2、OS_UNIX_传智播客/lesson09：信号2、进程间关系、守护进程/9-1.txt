全局变量异步I/O：
对于一些特殊情况：32位操作系统，long long int类型的全局变量共，由于CPU处理能力最高是32位并行，那么CPU在执行汇编语句的时候会一个C的赋值语句分成两步：一步处理32位低位，另外一部处理32位高位，但是如果在执行了第一部以后，被信号中断，执行的信号处理函数中又将该全局变量复了一次值，而返回执行第二步后，得到的结果既不是想要的信号来临之前的值，也不是信号处理中赋的值，而是二者混合，这当然不是我们想要的。致使这一问题发生的原因就是，long long int类型的复制在32位机器下不是原子操作，sig_atomic_t：平台下的原子操作类型。

volatile类型：
修饰变量时，防止编译器对其优化。因为，有的值需要多次从内存中取出来，虽然内存中的值一直没变，而编译器对这种重复无用的优化，提供了优化功能(gcc -On)，n为优化级别最大为3，但是有时(有异步操作的时候)我们不需要编译器对某个变量进行优化。就需要加volatite修饰，防止异步操作对内存的修改，而优化致使可能取到的旧值依然被使用。
--------------------------------------------------------------------------------------------------------------------------------------
SIGCHLD信号处理(默认忽略)：
SIGCHLD产生条件：
①子进程终止时，SIGCHLD告诉父进程进行子进程收尸(回收资源)。
②子进程接收到SIGSTOP信号停止时，父进程不予理睬。
③子进程处在停止态，接受到SIGCONT后唤醒时，父进程不予理睬。

status处理方式：
pid_t waitpid(pid_t pid, int * status, int options);

options：

WNOHANG：没有子进程结束立刻返回
WUNTRAECD：如果子进程由于被停职产生的SIGCHLD，waitpid则立即返回
WCONTIBUED：如果子进程由于被SIGCONT唤醒而产生SIGCHLD，waitpid则立即返回

获取status：
	WIFEXITED(status);
		子进程正常exit终止返回真
			WEXITSTATUS(status)返回子进程正常退出值
	WIFSIGNALED(status)
		子进程被信号终止返回真
			WIERMSIG(status)返回终止子进程的信号值
	WIFSTOPED(status)
		子进程被停止返回真
			WSTOPSIG(status)返回停止子进程的信号值
	WIFCONTINUED(status)
		子进程停止态转为就绪态返回真
--------------------------------------------------------------------------------------------------------------------------------------
sigqueue()函数：
int sigqueue(pid_t pid, int sig, const union sigval value);	

union sigval{
	int sigval_int;
	void * sival_ptr;//不同进程地址空间不同，所以只能在有血缘关系的进程间用
};

而对于sigqueue()函数则与sigaction()函数中结构体的第二个函数指针共同使用。sa_flags则不能置为0，而得用SA_SIGINFO。
对于sigqueue()与sigaction()的结合使用基本很少用。