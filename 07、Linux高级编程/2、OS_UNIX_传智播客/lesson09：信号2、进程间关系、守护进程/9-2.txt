进程间关系：
1、终端(登录终端，启动shell)：
	init->fork->exec->getty->用户输入账号->login->输入密码->exec->shell
而图形界面的终端，在开机时已经输入过账号密码，启动终端同时启动了shell。

PCB中保存了进程的控制终端信息：
每个进程都可以通过一个特殊得文件设备/dev/tty访问它的控制终端(/dev/tty指向当前终端，类似于一个this智能指针)。事实上每个终端设备都对应一个不同的设备文件，/dev/tty提供了一个通用的接口，一个进程要访问它的控制终端既可以通过/dev/tty，也可以通过该终端设备所对应的文件来访问。ttyname函数可以由文件描述符查出对应的文件名，该文件描述符必须指向一个终端设备而不是任意文件。

eg:
#include<stdio.h>
#include<unistd.h>

int main(void)
{
	printf("fd 0: %s\n",ttyname(0));
	printf("fd 1: %s\n",ttyname(1));
	printf("fd 2: %s\n",ttyname(2));
}

在多个不同终端中打印的是不同的结果。

2、规范模式输入处理：对终端输入以行进行处理。对每个读请求，终端驱动程序最多返回一行。如shell以回车表示一行结束，然后进行处理。
非规范模式输入处理：输入字符不装配成行，如对Ctrl+C、Ctrl+Z一些特殊字符的处理，从键盘设备输入，经过终端设备驱动程序到达“终端行规程”(line discipline)，被终端行规程捕获转换成信号进行特殊处理，如在vim中Ctr+D是向下滚动半个屏幕，而实际上Ctrl+D通常是终端文件结束符：可以关闭终端。。
------------------------------------------------------------------------------------------------------------------------------------
2、进程组：
获取进程组id：
pid_t getpgid(pid_t pid);//获取指定pid的所属组id
pid_t getpgrp(void);
//当getpgid的参数为0时，与getpgrp相同为获取调用者所属组id

组长进程可以创建一个进程组，创建该进程组中的进程，然后终止，只要进程组中有一个进程存在，进程组就存在，与组长进程是否存在无关。进程组的生存周期在最后一个进程终止(或转移至其他组)截止。
组长进程：其进程组id == 其进程id。那么如何设置一个进程成为新的组的“组长”呢？
setpgid(pid_t pid, pid_t gid);//本进程设置某进程(自己/子进程)的新的组进程(必须有权限设置)。
//若pid == gid，则是创建新的进程组并任命自己为组长。若改变子进程未新的组，应在fork之后exec之前调用。
------------------------------------------------------------------------------------------------------------------------------------
3、会话(SID，会话ID)：
SIGHUP(1)：当用户退出shell时，由shell启动的所有进程(会话组)将收到该信号，SIGHUP信号的默认处理动作是退出进程。

pid_t setsid(void);

①为调用进程设置会话组(修改所属会话组)，该进程会变成新会话首进程(session header)；
②该进程成为一个新(进程组&会话组)的组长；
③可能需要root权限(ubuntu不需要)；
④新会话丢弃原有控制终端，即该会话没有控制终端；
⑤调用进程不能是原进程组组长，否则出错返回；
⑥建立新会话时：先调用fork，父进程终止，子进程调用setsid。
为什么要有会话？
因为服务器程序开发时，需要服务器长时间不宕机，且服务进程长期处于运作状态，所以就不能跟终端有关联，否则，终端不小心关闭致使服务器服务进程终止造成服务中断。所以要将创建的服务进程，设置成为没有控制终端的进程，就需要在开发中使用会话的特点实现。比如我们操作系统上大多数进程都是与控制终端脱离关系的会话组进程(init、watchdog...)。

pid_t getsid(pid_t pid);
获取指定进程会话组id，当设置为0时，获取当前进程会话组id。
--------------------------------------------------------------------------------------------------------------------------------------
4、守护进程：
概念：Daemon(精灵)进程，是Linux中的后台服务进程，生存周期较长的进程，通常独立与控制终端并且周期性地执行某种任务或者等待处理某些事件的发生。
模型(守护进程编程步骤)：
①创建子进程，父进程退出，所有工作在子进程中进行，形式上脱离了控制终端；
②setsid()函数，使子进程独立出来，脱离实际控制；
③chdir()函数改变当前目录为根目录，防止占用可卸载的文件系统(也可换成其它路径)；
④umask()函数设置文件权限掩码，防止继承的文件创建屏蔽字拒绝某些权限，增加守护进程灵活性；
⑤关闭文件描述符，继承的打开文件不会用到(012三个描述符继承，但是其指向终端，不会再用到)，浪费系统资源，无法卸载；
⑥开始执行守护进程核心工作。 
⑦守护进程退出处理。
第⑤步中可以这样操作(012都指向“无底洞”)：
	close(0);
	open("/dev/null", O_RDWR);	
	dup2(0, 1);
	dup2(0, 2);


习题：
1、每隔10s在/tmp/daemon.log中写入当前时间
2、编写监控/home/usr/目录下文件创建与更改的守护进程，如果发生修改则将修改信息放在日志文件/home/usr/filechange.log

system()函数很强大但是由于其集合了fork、exec等，所以开销还比较大。