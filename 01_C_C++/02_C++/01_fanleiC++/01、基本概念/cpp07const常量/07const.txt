定义

const修饰的数据类型是指常类型，常类型的变量或对象的值是不能被更新的。
目的

const 推出的初始目的，正是为了取代预编译指令，消除它的缺点，同时继承它的优点。
主要作用

（1）可以定义const常量，具有不可变性。
　　例如：const int Max=100; Max++会产生错误;
　　（2）便于进行类型检查，使编译器对处理内容有更多了解，消除了一些隐患。
　　例如： void f(const int i) { .........} 编译器就会知道i是一个常量，不允许修改；
　　（3）可以避免意义模糊的数字出现，同样可以很方便地进行参数的调整和修改。 同宏定义一样，可以做到不变则已，一变都变！
　　如（1）中，如果想修改Max的内容，只需要：const int Max=you want;即可！
　　（4）可以保护被修饰的东西，防止意外的修改，增强程序的健壮性。 还是上面的例子，如果在函数体内修改了i，编译器就会报错；
　　例如： void f(const int i) { i=10;//error! }
　　（5） 可以节省空间，避免不必要的内存分配。 例如：
　　#define PI 3.14159 //常量宏
　　const double Pi=3.14159; //此时并未将Pi放入RAM中 ......
　　double i=Pi; //此时为Pi分配内存，以后不再分配！
　　double I=PI; //编译期间进行宏替换，分配内存
　　double j=Pi; //没有内存分配
　　double J=PI; //再进行宏替换，又一次分配内存！
　　const定义常量从汇编的角度来看，只是给出了对应的内存地址，而不是像#define一样给出的是立即数，所以，const定义的常量在程序运行过程中只有一份拷贝，而#define定义的常量在内存中有若干份拷贝。
　　（6） 提高了效率。
　　编译器通常不为普通const常量分配存储空间，而是将它们保存在符号表中，这使得它成为一个编译期间的常量，没有了存储与读内存的操作，使得它的效率也很高。
变量与常量

例：为什么下面的例子在使用一个const变量来初始化数组，ANSI C的编译器会报告一个错误呢？

const int n = 5;

int a[n];

答案与分析：

1）这个问题讨论的是“常量”与“只读变量”的区别。常量，例如5， "abc"，等，肯定是只读的，因为常量是被编译器放在内存中的只读区域，当然也就不能够去修改它。而“只读变量”则是在内存中开辟一个地方来存放它的值，只不过这个值由编译器限定不允许被修改。C语言关键字const就是用来限定一个变量不允许被改变的修饰符（Qualifier）。上述代码中变量n被修饰为只读变量，可惜再怎么修饰也不是常量。而ANSI C规定数组定义时长度必须是“常量”，“只读变量”也是不可以的，“常量”不等于“不可变的变量”。但是在C++中，局部数组是可以使用变量作为其长度的。

2）但是在标准C++中，这样定义的是一个常量，这种写法是对的。实际上，根据编译过程及内存分配来看，这种用法本来就应该是合理的，只是ANSI C对数组的规定限制了它（实际上用GCC或VS2005编译以上代码，确实没有错误产生，也没有给出警告）。

3）那么，在ANSI C中用什么来定义常量呢？答案是enum类型和#define宏，这两个都可以用来定义常量。
限定内容

例：下面的代码编译器会报一个错误，请问，哪一个语句是错误的呢？

typedef char * pStr;

char string[4] = "bbc";

const char *p1 =" string"; //1式

const pStr p2 =" string"; //2式

p1++;

p2++;

答案与分析：

问题出在p2++上。

1）const使用的基本形式： const type m;限定m不可变。替换基本形式中的m为1式中的*p1，替换后const char *p1;限定*p1不可变，当然p1是可变的，因此问题中p1++是对的。替换基本形式中的type为2式中的pStr，替换后const pStr m;限定m不可变，题中的pStr就是一种新类型，因此问题中p2不可

变，p2++是错误的。
指针举例
例一

下面分别用const限定不可变的内容是什么？

1）const在前面

const int nValue； //nValue是const

const char *pContent; //*pContent是const, pContent可变

const char* const pContent; //pContent和*pContent都是const

2）const在后面，与上面的声明对等

int const nValue; //nValue是const

char const * pContent; //*pContent是const, pContent可变

char* const pContent; //pContent是const,*pContent可变

char const* const pContent; //pContent和*pContent都是const

答案与分析：

const和指针一起使用是C语言中一个很常见的困惑之处，在实际开发中，特别是在看别人代码的时候，常常会因为这样而不好判断作者的意图，下面讲一下我的判断原则：

const只修饰其后的变量，至于const放在类型前还是类型后并没有区别。如：const int a和int const a都是修饰a为const。注意*不是一种类型，如果*pType之前是某类型，那么pType是指向该类型的指针

一个简单的判断方法：指针运算符*，是从右到左，那么如：char const * pContent，可以理解为char const (* pContent)，即* pContent为const，而pContent则是可变的。
例二

int const * p1,p2;

p2是const；(*p1)是一整体，因此(*p1)是const，但p1是可变的。int * p1,p2只代表p1是指向整型的指针，要表示p1、p2都是指针是需写成int * p1,* p2。所以无论是* const p1,p2还是const * p1,p2，里面的*都是属于p1的。
例三

int const * const p1,p2;

p2是const，是前一个const修饰的，*p1也被前一个const修饰，而p1被后一个const修饰。
例四

int * const p1,p2;

p1是const，（* const p1）是整体，所以const不修饰p2。
例五

指针指向及其指向变量的值的变化

const在*的左边，则指针指向的变量的值不可直接通过指针改变（可以通过其他途径改变）；在*的右边，则指针的指向不可变。简记为“左定值，右定向”。

1）指针指向的变量的值不能变，指向可变

int x = 1;

int y = 2;

const int* px = &x;

int const* px = &x; //这两句表达式一样效果

px = &y; //正确，允许改变指向

*px = 3; //错误，不允许改变指针指向的变量的值

2）指针指向的变量的值可以改变，指向不可变

int x = 1;

int y = 2;

int* const px = &x;

px = &y; //错误，不允许改变指针指向

*px = 3; //正确，允许改变指针指向的变量的值

3）指针指向的变量的值不可变，指向不可变

int x = 1;

int y = 2;

const int* const px = &x;

int const* const px = &x;

px = &y; //错误，不允许改变指针指向

*px = 3; //错误，不允许改变指针指向的变量的值
补充

在c中，对于const定义的指针，不赋初值编译不报错，

int* const px;这种定义是不允许的。（指针常量定义的时候对其进行初始化）

int const *px;这种定义是允许的。（常指针可以再定义的时候不初始化）

但是，在C++中

int* const px;和const int* const px;会报错，const int* px;不报错。

必须初始化指针的指向int* const px = &x;const int* const px=&x;

强烈建议在初始化时说明指针的指向，防止出现野指针！