1、寄存器寻址：
BX、BP、DI、SI可以出现在[...]进行偏移地址寻址。其它寄存器不能放到[]中去
而这四个寄存器的组合也只有四种：
[bx+si+idata]	==	[bx][si].idata	==	[bx].idata[si]	==	idata[bx][si]
[bx+si+idata]	==	[bx][di].idata	==	[bx].idata[di]	==	idata[bx][di]
[bp+si+idata]	==	[bp][si].idata	==	[bp].idata[si]	==	idata[bp][si]
[bp+di+idata]	==	[bp][di].idata	==	[bp].idata[di]	==	idata[bp][di]

也就是说bx和bp不能同时出现在[]中
并且si和di也不能同时出现在[]中
其余以这四个寄存器与数字组成的相加的情况均可以,谁先谁后倒无所谓
以上16个写法三个值位置可以相互调换,但是要注意的是：
[bx].[si].[3]、[bx].3[si]、[si].[bx].3等都是正确的
但是[bx].si.3、si[bx].3、bx[si].3等都是错误的，因为寄存器要加[],这似乎是没有必要强调的
因为我们通常用bx/bp做第一个偏移值(相对于段地址)
si/di做第二个偏移(相对于bx/bp)，idata放在最后，
凡是寄存器要加[],数字可加可不加，形成一种规则

当段地址没有给出时：
当[]中用的是BX时，默认的是DS寄存器存储段地址
当[]中用的是BP时，默认的是SS寄存器存储段地址
当[]中既没有BX也没有BP时默认的是DS寄存器存储段地址

指定段地址寄存器，则按指定走，不指定则按默认走(bx->ds,bp->ss)
eg:
[bx][si][3]	:	((ds*16)+bx+si+3)
[bp][di][5]	:	((ss*16)+bp+di+5)

ss:[bx][si][3]	:	((ss*16)+bx+si+3)
es:[bx][si][3]	:	((es*16)+bx+si+3)
ds:[bp][di][5]	:	((ds*16)+bp+di+5)
;--------------------------------------------------------------------------------------
2、数据长度/类型：
mov ax,1	//word 
add bl,1	//byte
如何制定一个地址单元是字型还是字节型？格式："操作符(指令)+X+ptr"指明单元长度是X(word/byte)类型的：
mov word ptr ds:[0],1	//word型数据1存放到ds:[0]、ds:[1]的地址单元(字型单元)
mov byte ptr es:[1],2	//byte型数据2存放到es:[0]的地址单元(字节型单元)
在没有寄存器参与的内存单元访问中，用word ptr/byte ptr显性声明某单元是字节型还是字型的。
但是push、pop指令操作(且只能操作)的是字型单元，不能人为指定。

[bx].idata[si]
eg:
struct Class{
	int sex;
	int age;
	char name[20];
};
struct Class stu;
stu.name[7]='?'	;//mov byte ptr [bx].idata[si],'?'类似于结构体中取数组成员，再对数组偏移。
[bx]/[bp]：定位结构体
idata：定位结构体中某一数据项
[si]/[di]：来访问数据项中的某个元素
;----------------------------------------------------------------------------------------
3、div除法指令/dd伪指令/dup操作符：