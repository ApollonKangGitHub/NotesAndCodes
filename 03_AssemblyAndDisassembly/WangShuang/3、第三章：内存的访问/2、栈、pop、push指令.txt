栈是一段连续的内存空间，也就是连续的内存地址。2种特殊的访问方式：入栈与出栈(push与pop)，操作的都是字型数据(2Byte)。

入栈	push	字型数据	==>	数据从哪里来
出栈	pop	字型数据	==>	数据取出到哪里去

push	-->	SP - 2	--> 将字型数据存放到SS:SP地址中
pop	-->	将SS:SP地址的字型数据取出来	--> SP + 2

指令使用规则：
push 16bit寄存器 (ax\bx\cx\dx\ds\es\ss\sp\...)，8位寄存器不可以。SP-2，从指定寄存器中读取数据入栈。
pop 16bit寄存器	从栈中取出数据放到寄存器中，SP+2。
注意：栈底在高内存地址，任意时刻，SS:SP指向栈顶元素，所以说栈在哪里由SS:SP决定的(给SS:SP初值即为栈底)。但是栈的大小是没有严格界限的，当SP-2<0时，又会从FFFF开始减，但是不保证其权限。可能越界错误，可能不越界错误(不会自动判断栈满/栈空)。而关于栈的越界问题需要程序员自己注意。
----------------------------------------------------------------
eg:
-r SS
2000
-r SP 
10
或者：
mov ax,2000 
mov ss,ax
mov sp,10	//IP寄存器不能直接用值修改，但是SP寄存器可以

就是指定栈底为2000:10

此时SS:SP=2000:0010
mov ax,1234
mov bx,5678
push ax		//SP-2=000E，2000:E与2000:F中分别存放34和12
push bx		//SP-2=000C，2000:C与2000:D中分别存放78和56
pop cx	//出栈CX=5678，SP+2=000E	
pop dx	//出栈DX=1234，SP+2=0010
----------------------------------------------------------------
一个栈最多能存放多少个字型数据？
是和SP寄存器的大小(0 -- FFFF)有关的。最多存放65536个字节，所以能够最多存放32768个字型数据。如果push的次数大于32768次，以前的数据肯定是会被覆盖的。SP最大设置为FFFF，设置FFFFF是不能成功的。

数据段：存放数据的一个段(段地址在DS中)
代码段：存放代码的一个段(段地址在CS中)
栈段：存放临时性数据的并且由SS:SP维护的一个段(段地址在SS中)

将10000H~1001FH中的八个字，逆序复制到20000H~2001FH中，如何用栈做？
法一：
从ds:[]入栈，ds:[]是源(10000H~1001FH)，栈是目标(20000H~2001FH)

//设置数据段
mov ax,1000H
mov ds,ax	

//设置栈段
mov ax,2000H
mov ss,ax
mov sp,10H	

//从数据段向栈段复制
push [0]
push [2]
push [4]
push [6]
push [8]
push [A]
push [C]
push [E]
法二：
出栈至ds:[],栈是源(20000H~2001FH)，ds:[]是目标(10000H~1001FH)

//设置数据段
mov ax,2000H
mov ds,ax

//设置栈段
mov ax,1000H
mov ss,ax
mov sp,0H

//从栈段向数据段复制
pop [E]
pop [C]
pop [A]
pop [8]
pop [6]
pop [4]
pop [2]
pop [0]