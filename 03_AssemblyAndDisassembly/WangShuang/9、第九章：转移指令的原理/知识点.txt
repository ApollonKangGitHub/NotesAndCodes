offset操作符:
start:mov ax,0
	mov bx,offset s2	;获取s2标号的地址到bx中
s:add ax,1
s1:add ax,2
s2:add ax,3

nop指令：什么都不做，只占用两个字节内存
;-----------------------------------------------------
jmp:本质修改CS:IP
jmp short 标号	;转移到编号处执行指令(段内短转移),(IP)=(IP)+8位位移,该式表明新IP是旧IP的偏移，而与段地址无关
				;(Debug中查看jmp对应机器指令的地址部分是相对于当前指令地址的偏移量)
jmp near 标号	;转移到编号处执行指令(段内近转移),(IP)=(IP)+16位位移
				;(Debug中查看jmp对应机器指令的地址部分是相对于当前指令地址的偏移量)
jmp far 标号	;转移到编号处执行指令(段间转移),(CS):(IP)=标号处的CS:IP
				;(Debug中查看jmp对应机器指令的地址部分是完整的CS:IP地址，eg:EA0B01BD0B==>cs:IP=0BBD:010B)

jmp value		;跳到指定value的IP,仅在debug中有效(因为在程序中这样写极度不安全，所以不允许)
jmp 16位reg		;修改IP
jmp word ptr 内存单元地址	;(段内转移)修改IP
jmp dword ptr 内存单元地址	;(段间转移)修改CS:IP(高两位为CS,低两位为IP)

“jmp X 标号”看似是跳转，其本质还是修改CS:IP
TEST1.asm很好地说明了jmp的作用本质是修改CS:IP/只修改IP，而不是跳转到指定位置去。
	jmp near 标号	;修改IP的为标号标识地址的偏移部分
	jmp far 标号	;修改CS为标号标识地址的段地址部分,修改IP的为标号标识地址的偏移部分
	jmp ax				;修改IP为ax的值
	jmp word ptr [0] 	;修改IP为ds:[0]为地址的一个字的内容
	jmp dword ptr [6]	;修改IP为ds:[6]为地址的一个字的内容，修改CS为ds:[8]为地址的一个字的内容

	小结：所谓段间段内的区别在于：段间修改IP，而段内修改CS:IP
所以：
“jmp far 标号” 基本等价于 “jmp dword ptr 内存单元地址”/“jmp 16位reg”,
“jmp near 标号” 基本等价于 “jmp word ptr 内存单元地址”,
	只不过“jmp far 标号”、“jmp near 标号”对于跳转位置更明显一点，
	而“jmp 16位reg”、“jmp word ptr 内存单元地址”、jmp dword ptr 内存单元地址”更清楚揭示本质

注意：
像jmp near与jmp far可以在debug中运行，但是jmp word ptr [bx]与jmp dword ptr [bx]就不行
因为word与dword还有ptr对于debug调试器来说不认识，(Debug只认识指令与立即数不认识伪指令) 
;-----------------------------------------------------------------------------------------
jcxz指令：为有条件转移指令，所有的有条件转移指令都是短转移，在对应的机器码中，包含转移的位置，
而不是目的地址。对IP的修改范围为-128~127(用补码表示)。

格式："jcxz 标号"
如果(cx)=0，就跳到标号处执行，否则继续向下执行。
操作：
①当(cx)=0时，(IP)=(IP)+8位位移
②8位位移=标号处地址-jcxz指令后第一个字节地址。
③编译器在编译时便算出来偏移地址大小，用补码表示。

例子程序："jcxz.asm"

loop则与jcxz是相反的道理，当cx不等于0时jmp执行，等于零时越过loop指令顺序执行。
dec bx	;自减
inc bx	;自加
编译器在编译时，遇到转移位移越界的问题会报编译错误。

;---------------------------------------------------------------------------------------------
80*25彩色字符模式显示缓冲区结构：
B8000H~BFFFFH共32K的空间，分为8页，一页4K，在任意一页上写都可以
可以显示25行，每行80字符，一个字符占用两个字节，高字节为属性，低字节为ASCII
一屏幕占用80*25*2=4000字节

------------------
|BL|R|G|B|I|R|G|B|
------------------
闪烁、红绿蓝(背景色)、高亮、红绿蓝(前景色)
设置不同位，为不同属性
但是与RGB888和RGB655相比还是差许多