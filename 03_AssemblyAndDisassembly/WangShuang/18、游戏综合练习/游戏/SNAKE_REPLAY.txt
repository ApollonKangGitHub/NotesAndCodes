assume cs:code,ds:data,ss:stack

data segment

SCREEN_COLOR		dw	0700H

BOUNDARY_COLOR		dw	1131H
NEXT_ROW		dw	160




SNAKE_HEAD		dw	0
SNAKE_STERN		dw	12

SNAKE			dw	200 dup (0,0,0)



UP			db	48H
DOWN			db	50H
LEFT			db	4BH
RIGHT			db	4DH

SNAKE_COLOR		dw	2201H


DIRECTION		dw	3


DIRECTION_FUNCTION	dw	OFFSET isMoveUp		- OFFSET greedy_snake + 7E00H
			dw	OFFSET isMoveDown	- OFFSET greedy_snake + 7E00H
			dw	OFFSET isMoveLeft	- OFFSET greedy_snake + 7E00H
			dw	OFFSET isMoveRight	- OFFSET greedy_snake + 7E00H


REPLAY_DIRECTION_INDEX	dw	0				;top
REPLAY_DIRECTION_SAV	db	200 dup (0FFH),0FFH,0FFH,0FFH	;string


data ends

stack segment stack
	db	128 dup (0)
stack ends



code segment

	start:	mov ax,stack
		mov ss,ax
		mov sp,128


		call sav_old_int9
		call cpy_greedy_snake
		call set_new_int9


		mov bx,0
		push bx
		mov bx,7E00H
		push bx
		retf

		mov ax,4C00H
		int 21H


;===============================================
greedy_snake:	call init_reg
		call clear_screen

		call init_screen
		call init_snake
		call init_direction
		call init_replay_direction_index
		


;nextDelay:	call delay
		;cli
		;call isMoveDirection
		;sti
		;jmp nextDelay


testA:		mov ax,1000H
		jmp testA

		mov ax,4C00H
		int 21H


;===============================================
replayGame:	call init_reg
		call clear_screen
		


		call init_screen

		call init_snake_mem

		call init_snake
		call init_direction
		call init_replay_direction_index

nextDelay:	call delay
		cli
		call replay_direction_pop
		sti
		jmp nextDelay

repalOver:	mov ax,4C00H
		int 21H


;===============================================
replay_direction_pop:
		mov si,REPLAY_DIRECTION_INDEX

		mov bx,0
		mov bl,ds:REPLAY_DIRECTION_SAV[si]
		cmp bl,0FFH
		je repalOver
		add bx,bx

		call word ptr ds:DIRECTION_FUNCTION[bx]

		inc REPLAY_DIRECTION_INDEX
		
		ret
;===============================================
init_snake_mem:	mov SNAKE_HEAD,0
		mov SNAKE_STERN,12
		ret



;===============================================
init_replay_direction_index:
		mov REPLAY_DIRECTION_INDEX,0
		ret
;===============================================
isMoveDirection:
		mov bx,DIRECTION
		add bx,bx

		call word ptr ds:DIRECTION_FUNCTION[bx]
		ret
;===============================================
delay:		push ax
		push dx

		mov dx,9000H
		sub ax,ax

delaying:	sub ax,1000H
		sbb dx,0
		cmp ax,0
		jne delaying
		cmp dx,0
		jne delaying

		pop dx
		pop ax
		ret
;===============================================
init_direction:	mov DIRECTION,3
		ret
;===============================================
init_snake:	mov bx,OFFSET SNAKE
		add bx,SNAKE_HEAD
		mov dx,SNAKE_COLOR
		mov si,160*10 + 40*2


		mov word ptr ds:[bx+0],0
		mov ds:[bx+2],si
		mov es:[si],dx
		mov word ptr ds:[bx+4],6

		add bx,6
		sub si,2

		mov word ptr ds:[bx+0],0
		mov ds:[bx+2],si
		mov es:[si],dx
		mov word ptr ds:[bx+4],12

		add bx,6
		sub si,2


		mov word ptr ds:[bx+0],6
		mov ds:[bx+2],si
		mov es:[si],dx
		mov word ptr ds:[bx+4],18
		

		ret
;===============================================
init_screen:	mov dx,BOUNDARY_COLOR
		call show_up_down_line
		call show_left_right_line	
		ret


;===============================================
show_left_right_line:
		mov bx,0
		mov cx,23

showLeftRightLine:
		mov es:[bx],dx
		mov es:[bx+158],dx
		add bx,NEXT_ROW
		loop showLeftRightLine

		ret
;===============================================
show_up_down_line:
		mov bx,0
		mov cx,80

showUpDownLine:	mov es:[bx],dx
		mov es:[bx+160*23],dx
		add bx,2
		loop showUpDownLine
		ret
;===============================================
clear_screen:	mov bx,0
		mov dx,SCREEN_COLOR
		mov cx,2000

clearScreen:	mov es:[bx],dx
		add bx,2
		loop clearScreen

		ret
;===============================================
init_reg:	mov bx,0B800H
		mov es,bx

		mov bx,data
		mov ds,bx
		ret









;===============================================
new_int9:	push ax

		in al,60H
		pushf
		call dword ptr cs:[200H]

		

		cmp al,01H
		je isReplayGame

		cmp al,UP
		je isUp
		cmp al,DOWN
		je isDown
		cmp al,LEFT
		je isLeft
		cmp al,RIGHT
		je isRight

		

		cmp al,3BH
		jne int9Ret
		call change_screen_color

int9Ret:	pop ax
		iret


;====================================================
isReplayGame:	pop ax
		add sp,4
		popf
		jmp replayGame
;====================================================
isUp:		mov di,160*24 + 40*2
		mov byte ptr es:[di],'U'
		call isMoveUp
		mov dl,0
		call replay_direction_push
		jmp int9Ret

isDown:		mov di,160*24 + 40*2
		mov byte ptr es:[di],'D'
		call isMoveDown
		mov dl,1
		call replay_direction_push
		jmp int9Ret

isLeft:		mov di,160*24 + 40*2
		mov byte ptr es:[di],'L'
		call isMoveLeft
		mov dl,2
		call replay_direction_push
		jmp int9Ret

isRight:	mov di,160*24 + 40*2
		mov byte ptr es:[di],'R'
		call isMoveRight
		mov dl,3
		call replay_direction_push
		jmp int9Ret



;====================================================
replay_direction_push:

		mov bx,REPLAY_DIRECTION_INDEX
		mov ds:REPLAY_DIRECTION_SAV[bx],dl
		inc REPLAY_DIRECTION_INDEX

		ret
;====================================================
isMoveRight:	mov bx,OFFSET SNAKE
		add bx,SNAKE_HEAD
		mov si,ds:[bx+2]
		add si,2

		cmp byte ptr es:[si],0
		jne noMoveRight
		call new_snake
		mov DIRECTION,3

noMoveRight:	ret
;====================================================
isMoveLeft:	mov bx,OFFSET SNAKE
		add bx,SNAKE_HEAD
		mov si,ds:[bx+2]
		sub si,2

		cmp byte ptr es:[si],0
		jne noMoveLeft
		call new_snake
		mov DIRECTION,2

noMoveLeft:	ret
;====================================================

isMoveDown:	mov bx,OFFSET SNAKE
		add bx,SNAKE_HEAD
		mov si,ds:[bx+2]
		add si,NEXT_ROW

		cmp byte ptr es:[si],0
		jne noMoveDown
		call new_snake
		mov DIRECTION,1	


noMoveDown:	ret
;====================================================
isMoveUp:	mov bx,OFFSET SNAKE
		add bx,SNAKE_HEAD
		mov si,ds:[bx+2]
		sub si,NEXT_ROW

		cmp byte ptr es:[si],0
		jne noMoveUp
		call new_snake
		mov DIRECTION,0	

		
noMoveUp:	ret


;====================================================
new_snake:	push SNAKE_STERN
		pop ds:[bx+0]

		mov bx,OFFSET SNAKE
		add bx,SNAKE_STERN

		push ds:[bx+0]
		mov word ptr ds:[bx+0],0

		mov di,ds:[bx+2]
		push SCREEN_COLOR
		pop es:[di]

		mov ds:[bx+2],si
		push SNAKE_COLOR
		pop es:[si]

		push SNAKE_HEAD
		pop ds:[bx+4]

		push SNAKE_STERN
		pop SNAKE_HEAD

		pop SNAKE_STERN

		ret
;====================================================
change_screen_color:
		push bx
		push cx
		push es

		mov bx,0B800H
		mov es,bx

		mov bx,1
		mov cx,2000

changeScreenColor:
		inc byte ptr es:[bx]
		add bx,2
		loop changeScreenColor

		pop es
		pop cx
		pop bx
		ret


snake_end:	nop










;===============================================
set_new_int9:	mov bx,0
		mov es,bx

		cli
		mov word ptr es:[9*4],OFFSET new_int9 - OFFSET greedy_snake + 7E00H
		mov word ptr es:[9*4+2],0
		sti
		ret
;===============================================
sav_old_int9:	mov bx,0
		mov es,bx

		push es:[9*4]
		pop es:[200H]
		push es:[9*4+2]
		pop es:[202H]
		ret
;===============================================
cpy_greedy_snake:
		mov bx,cs
		mov ds,bx
		mov si,OFFSET greedy_snake

		mov bx,0
		mov es,bx
		mov di,7E00H

		mov cx,OFFSET snake_end - OFFSET greedy_snake
		cld
		rep movsb
		ret


code ends



end start



